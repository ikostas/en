<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>The Real Changes</title>
  <subtitle>A blog about life &amp; tech</subtitle>
  <link href="https://en.kovchinnikov.info/feed/feed.xml" rel="self" />
  <link href="https://en.kovchinnikov.info/" />
  <updated>2025-10-06T19:03:00Z</updated>
  <id>https://en.kovchinnikov.info/</id>
  <author>
    <name>Konstantin Ovchinnikov</name>
  </author>
  <entry>
    <title>7 Sins of Dysfunctional IT Management</title>
    <link href="https://en.kovchinnikov.info/2025-10-it-management-sins.html" />
    <updated>2025-10-06T19:03:00Z</updated>
    <id>https://en.kovchinnikov.info/2025-10-it-management-sins.html</id>
    <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;I&#39;d like to present some signs of dysfunctional IT management that are easy to recognize. If these signs are present, it means that some major standard IT management practices or processes are missing. These indicators don’t care what your IT director declares or what certifications you hold. Yes, the focus is heavily on information security for a reason – in all the sections below, information security is central. If these practices are missing, you risk losing information in the best-case scenario, or paying for it in the worst case. Many companies do end up paying in such situations but don’t advertise it, so we lack reliable statistics.&lt;/p&gt;
&lt;p&gt;I tried to pull some data, but for me the reasoning is simple: you have a hacker in a third world country with a 100 USD computer motivated to get some percent of million-dollar ransom for each case he/she/they was able to encrypt and/or steal/destroy company&#39;s data. And an employer can even not pay the hacker, just feed him, 5 USD a day would be enough. Just look at these differences, and you&#39;ll get the idea about this motivation. And the more the company pays, the more profitable this &amp;quot;business&amp;quot; becomes. But economics is egoistic, some companies pay to learn about information security the hard way, and they are not concerned about the information security of the others, except for the large companies requiring at least something from their suppliers.&lt;/p&gt;
&lt;h2 id=&quot;1-no-minimal-itil-practices-implemented&quot;&gt;1. No minimal ITIL practices implemented&lt;/h2&gt;
&lt;p&gt;Broadly speaking, ITIL is a well-known set of processes and practices for IT Service Management, you normally start with a Service Desk (a single point of contact) and Incident Management, then proceed to Problem Management, Change Management, Configuration Management and so on. Sure, every process costs a lot of money to implement and to keep it running. I usually start checking Service Desk and asking three basic questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does a single point of contact exist?&lt;/li&gt;
&lt;li&gt;Does everyone know about it?&lt;/li&gt;
&lt;li&gt;If I send a message to this point of contact, will anything happen?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you end up with a few different points of contact, someone is unaware, or actually nothing happens, you are in trouble. NIS2, an EU regulation, to put it into simple words, just says: bro, just use ITIL. Now NIS2 is a requirement for big companies or companies operating critical infrastructure, and it&#39;s not mandatory for all the businesses – for obvious reasons. But I think literally all the companies should implement minimal ITIL, which is also about some basic security, backups in terms of data and in terms of internet channels.&lt;/p&gt;
&lt;p&gt;&amp;quot;We have one internet channel and we&#39;re doing fine!&amp;quot; – say some &amp;quot;top-managers&amp;quot;, but that simply means your processes are not automated. By automation I mean something in the information system directs informational and/or material flows in reality. If you enter transactions post-factum, that&#39;s not automation in this sense. There&#39;s a particular very low level of information exchange and efficiency associated with this model, and there&#39;s nothing to be proud about, to put it mildly.&lt;/p&gt;
&lt;p&gt;For governments and government suppliers, a high level of ITIL implementation is actually mandatory, and a few recent incidents prove that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security update ruined airport services over the world on 19th 2024 (delivered to you by CrowdStrike and Microsoft) – a typical example of release management not in place, and it&#39;s even not that high-level process. I&#39;m maybe dumb, but I still can&#39;t get how you can run critical apps on Windows.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.datacenterdynamics.com/en/news/858tb-of-government-data-may-be-lost-for-good-after-south-korea-data-center-fire/&quot;&gt;Government data lost in South Korea data center yesterday&lt;/a&gt; – well, it&#39;s something more advanced, it&#39;s called Continuity Management and it was widely adopted after 9/11, that you probably shouldn&#39;t have all the data centers and data in one physical location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But let&#39;s return to any company, no matter how small it is, and talk about basic stuff.&lt;/p&gt;
&lt;h2 id=&quot;2-using-email-to-send-important-documents&quot;&gt;2. Using email to send important documents&lt;/h2&gt;
&lt;p&gt;I&#39;ll start from the theory, but I&#39;ll try to make it exciting, because it&#39;s not about the email per se, it&#39;s about ignoring the fundamental principles. So information transfer should go like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The sender sends the message&lt;/li&gt;
&lt;li&gt;The receiver receives the message&lt;/li&gt;
&lt;li&gt;The receiver sends the confirmation, that the message was received&lt;/li&gt;
&lt;li&gt;The sender receives the confirmation; if confirmation is not received within reasonable time, he tries again!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To automate it and make it kind of standard, the engineers invented a transaction: before the first action the sender should probably open a transaction and close it when the confirmation is received, otherwise roll the transaction back, so the state is that the message was not received. Transactions guard one of the most important things everyone actually cares about, and it&#39;s called data integrity. People get that you can&#39;t be half-pregnant. But they use email, where transactions do not exist and you do not have idea if the message was received. Ok, technically there are private extensions that allow this confirmation check mark, but it&#39;s not standard and if there&#39;s no check mark it doesn&#39;t tell you anything as well.&lt;/p&gt;
&lt;p&gt;But that&#39;s not the only problem with email! The protocol presumes that there will be a number of servers in the middle, which are almost randomly selected. So, first, a server can get a message and go off-grid, and no one will ever know the message ever existed. But, second, any server in the middle can read your message. I&#39;m in the church of cryptography with the open key, so I believe that it will be significantly harder to read encrypted messages, and I don&#39;t believe in any other &amp;quot;security&amp;quot; measures. But that&#39;s not all. The &amp;quot;guy in the middle&amp;quot; could modify the message and send it further or send other &amp;quot;phishing&amp;quot; messages based on the information he has. Any modern messenger (WhatsApp, Slack, MS Teams) is better than this.&lt;/p&gt;
&lt;p&gt;I literally have no idea why people still use email for any business-related issue, why all the services in the internet are activated using email. And if you send any business-related document, it&#39;s on you to encrypt it and to (well, manually) get a confirmation that it was received. And from that I see what telecom providers are doing as literally heroic efforts to make this zombie (I mean email) work. They do it using, for example, credibility score for the server, so although technically you can create your own email server, almost no one does it nowadays, because it&#39;s problematic to make it work. So, it&#39;s not &lt;strong&gt;that bad&lt;/strong&gt;, but it&#39;s still bad. The thing that surprises me the most, that I&#39;ve never read a single article like &amp;quot;guys, we should stop using email and solve this email problem, maybe we should all agree on some new protocol&amp;quot;. More companies use chats, because of the speed of information exchange. Don&#39;t get me wrong, I enjoy writing structured mails, but in this case chat is better from security and data integrity viewpoints. Ok, let&#39;s move on.&lt;/p&gt;
&lt;h2 id=&quot;3-not-using-digital-signature&quot;&gt;3. Not using digital signature&lt;/h2&gt;
&lt;p&gt;So, you can encrypt your email or you could sign it, that&#39;s basically a checksum, verifiable with the help of your publicly-available signature (the open key). But digital signature goes beyond that and in civilized countries the legislation is for a long time in place, so in Europe you can sign any contract with appropriate signature and it will be no different from a contract signed on paper. Why are paper transactions so bad? I read some papers of the Docusign, the market leader, and I saw some arguments, but they seem vague to me, so here&#39;s my version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single source of truth: you trust the information system, what contract version is in place, you don&#39;t waste the time checking it and making suboptimal decisions based on guesses;&lt;/li&gt;
&lt;li&gt;The speed of working with information, because you can use all the digital tools to work with the contracts in the digital form, even basic operations like search, find and replace matter;&lt;/li&gt;
&lt;li&gt;Information security and data integrity: access is managed in the program and you can have all the proper backups for the data on all the continents, if it&#39;s justified.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&#39;s something still missing with digital signatures, at least in Europe. This technology is based on cryptography, I mean the algorithms are freely available to everyone. I know there are costs associated with running call centers for video verifications or cloud solutions to store the data and host the approval processes, integration with external systems, etc. Still, basic digital signature from my perspective should be dirt cheap, and it&#39;s not there. I looked for the solutions and the suppliers, the top-management of the small companies still can&#39;t justify the cost for themselves, especially if we are talking about signing numerous project documents, for example.&lt;/p&gt;
&lt;p&gt;And I don&#39;t know what are the limits for disrupting this industry, I mean for a competitor with a dirt-cheap solution to appear. I assume that there are some certification or license costs for signature providers, and it&#39;s like licensing the air, because the technology costs nothing. Nowadays it&#39;s a cringe to set Russia as an example, but just to prove the point that a digital signature can be working and dirt-cheap, that&#39;s what has been achieved in Russia, and I mean country-wide. Actually the size of the territory, dysfunctional post services and an environment with a low trust between the counterparties accelerated this process. So, it can be done.&lt;/p&gt;
&lt;h2 id=&quot;4-lamp-wordpress-even-for-external-websites&quot;&gt;4. LAMP/Wordpress, even for external websites&lt;/h2&gt;
&lt;p&gt;This is going to be the most technical part, and probably the most arguable, but I carefully crafted and collected my arguments for a long time, so let&#39;s dive into it. First, a few words about the heading:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LAMP stands for Linux + Apache + MySQL + PHP. Linux and MySQL are still going strong, from my point of view, but Apache and PHP seem to be irrelevant, more on that below;&lt;/li&gt;
&lt;li&gt;&amp;quot;Even&amp;quot; for external websites means that although external environment is more dangerous, you&#39;d probably have no serious consequences if it&#39;s hacked, as it contains no critical info or personal data. It&#39;s a &amp;quot;business card&amp;quot; type website with some info about the company, it&#39;s not a web app involved in some business processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The issues with Apache were noticed and fixed by Ryan Dahl, the Creator of Node.js, and you can read some useful stuff in his &lt;a href=&quot;https://www.linkedin.com/pulse/interview-ryan-dahl-creator-nodejs-andrey-okhotnikov/&quot;&gt;interview from 2018&lt;/a&gt;. For me, it comes down to this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Launching application server, in case of Apache it&#39;s mod_php, to service just one request. One application server for one request, that&#39;s crazy!&lt;/li&gt;
&lt;li&gt;Blocking, which is discussed in the interview, which is consequence, because mod_php apps can&#39;t really communicate with each other.&lt;/li&gt;
&lt;li&gt;mod_php as the prevailing app making php the prevailing language for the back-end, although PHP stands for &amp;quot;PHP hates programmers&amp;quot;. :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, let&#39;s look at the other side. The technologies evolved just to make Apache usable further:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx, which was introduced as a caching web-server for static content, generated by mod_php;&lt;/li&gt;
&lt;li&gt;containers for load balancing; well, it&#39;s not that hard to overload Apache, if it launches new app for each request; by the way, it&#39;s called C10k problem, because you need just 10k connections for that;&lt;/li&gt;
&lt;li&gt;frameworks with caching architecture, like Drupal, again to address this mod_php problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These technologies are the crutches for an outdated technology. The presence of these crutches itself poses a question: maybe we should invent a new solution without these flaws?&lt;/p&gt;
&lt;p&gt;And I&#39;m really disappointed with breaking changes in PHP 8, which prevented me to use my favourite Dokuwiki in my next projects, made it harder to install Dokuwiki just to access my old knowledge base and raised security concerns about all the frameworks that didn&#39;t migrate to PHP 8, because PHP 7 will eventually come to the end of life. So, yes, breaking changes really break the trust in the technology. And that&#39;s apart from PHP not encouraging developers to build stable secure apps. On the contrary, it lowered the qualification required to write a web app, so, yes, it&#39;s still powering 80% of the web, an average PHP app being just horrible. Laravel still keeps PHP alive, though. Regretfully, but there&#39;s another problem: there are not so many battery-included frameworks, Laravel being one of them.&lt;/p&gt;
&lt;p&gt;Wordpress had numerous vulnerabilities, using it means you chose the cheapest solution not taking into consideration anything else. It&#39;s just displaying your IT illiteracy to the whole world. By the way, anyone can view the HTML source and find Wordpress there. It&#39;s just a joke when a corporate website is powered by it. It&#39;s a double joke when it&#39;s hosted on a shared web hosting, these guys can be just scam, making you pay more the next year for doing less – probably because they know that you are not that tech-savvy, if you use their services. That&#39;s the reason I migrated to the static website on GitHub.&lt;/p&gt;
&lt;p&gt;Were there days when LAMP and even Wordpress were cool? Sure, like in 90s. Why isn&#39;t it cool anymore? Well, we have other technologies. And by technologies I don&#39;t mean Node.js only, Go is probably better, it looks like a proper Node.js and fixed JavaScript. Of course there are hardships with Go and Node.js, as well as with React and other front-end frameworks. But it&#39;s better to have a modern stack even on a business-card type website. It turns out that &lt;a href=&quot;https://justfuckingusereact.com/&quot;&gt;React is still cool&lt;/a&gt;, by the way.&lt;/p&gt;
&lt;p&gt;Why would you want a dynamic business-card website? You could have a static website and still have dynamic forms, even comments and search using external services. But your website would be blazing fast, bullet-proof secure, and nobody prevents you from making it look beautiful. You even could use React/Vue, although it presumes some back-end, and solutions like Docusaurus, Gatsby, Astro, VitePress. Because that&#39;s cool now. N.B.: I use 11ty, by the way, as you can see in the footer.&lt;/p&gt;
&lt;h2 id=&quot;5-no-regular-pen-testing-from-external-company&quot;&gt;5. No regular pen testing from external company&lt;/h2&gt;
&lt;p&gt;Let&#39;s return to security, and it&#39;s as good as it gets to break it. So, how do you break security? It turns out, that &amp;quot;psy ops&amp;quot; are more effective, so you&#39;ll probably use phishing emails or calls, even some offline contact with a person to build trust and to make him/her/them break security protocol. To open a link, to fill in the password on a phishing website, to send a confidential document to a hacker. You need not that complicated tech here, and you can&#39;t know how secure you are when you don&#39;t measure. Well, that&#39;s exactly the point to be measured: the end of the chain, the most vulnerable link, a human. Your dear employees passed the trainings, successfully answered all the questions after that. But what will they do, when they lack the time, they are stressed and they have never actually identified a menace or reacted to it properly? Well, they&#39;ll open the link and type in their password, what could go wrong?&lt;/p&gt;
&lt;p&gt;And testing your company with internal resources is just a conflict of interest, because you paid for these security trainings, it should mean you&#39;d be safe, right? You tend to see reality as you want it, not how it is, and that&#39;s a problem.&lt;/p&gt;
&lt;h2 id=&quot;6-no-security-trainings-for-everyone&quot;&gt;6. No security trainings for everyone&lt;/h2&gt;
&lt;p&gt;So, there&#39;s a war going on, new measures to break your security systems or trick alarms of your employees are invented every day. But what&#39;s the chance that you face something that no one expected before? It&#39;s not that big. Most disasters happen when someone uses a known tactic and scales it. It could be prevented if you just inform people that this type of attack exists.&lt;/p&gt;
&lt;p&gt;A few fresh examples when I was almost tricked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A request from a chat app to enter my password for this app, it didn&#39;t look like it&#39;s external.&lt;/li&gt;
&lt;li&gt;A scam when two guys call: one talks to you and says that you&#39;ll get a confirmation code from the bank, and another calls the bank and asks them to send a confirmation call to you; so yes, you receive a confirmation code from your bank, if you&#39;re not aware, and this lowers your security.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The knowledge tends to dissolve with time, so it&#39;s boring, but reminding people of the security concerns regularly makes them work, and it&#39;s still cheaper than dealing with the consequences. Ok, let&#39;s talk about the last topic here, when someone steals a laptop.&lt;/p&gt;
&lt;h2 id=&quot;7-not-encrypting-laptop-drives&quot;&gt;7. Not encrypting laptop drives&lt;/h2&gt;
&lt;p&gt;I worked at an audit company, in the consulting department though, and there was a mandatory training that the price of the laptop is nothing compared to the value of the information on it. I think probably more people should think about it. Sure enough, all the laptop drives were encrypted, and some other security measures were implemented to prevent copying data to non-encrypted USB drives or sending data over the network. From what I know now, that&#39;s not enough, but encrypting the hard drive is the ABC of information security. You even don&#39;t need anyone to steal a laptop; people just forget their laptops everywhere. You just need to apply statistics and probability theory, multiply by the number of employees in your company, and you&#39;ll get the exact number of laptops that will be lost per year for sure. Do I need to say more?&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We don&#39;t know what will happen, but I believe in processes and practices that can deal at least with what we know about. The real facepalm happens when we knew about the risk, and we didn&#39;t manage it. It&#39;s strange that this type of behaviour is present in IT, but it is, and it&#39;s not always the money, it&#39;s about the literacy, curiosity and staying up-to-date. Well, that&#39;s what makes professionalism, isn&#39;t it?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Linux GUI App is a Rabbit Hole</title>
    <link href="https://en.kovchinnikov.info/2025-09-linux-gui.html" />
    <updated>2025-09-16T20:34:00Z</updated>
    <id>https://en.kovchinnikov.info/2025-09-linux-gui.html</id>
    <content type="html">&lt;h2 id=&quot;how-it-started&quot;&gt;How it started&lt;/h2&gt;
&lt;p&gt;First, I was reading the reddit /linuxsucks community. After that, I noticed more &#39;migration to Linux&#39; discussions, and I thought: why would no one make a Windows-to-Linux migration toolkit? This raised two questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are there tasks worth automating?&lt;/li&gt;
&lt;li&gt;Can the program provide some links for novices to “start with Linux the right way”?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Starting with the latter point, I suppose more people should get acquainted with Linux through Git for Windows and virtual machines. The main mistake is when you don’t understand what you are doing, and you install Linux as a single or dual-boot operating system (backups are for cowards), and then it doesn’t work as expected. That’s called &#39;expectation management&#39;, and probably we never really saw it as a task. The most successful case, Ubuntu, tried to meet existing expectations, making Linux &#39;almost like Windows&#39;, but I don’t think it’s worth it. I use Fedora and suggest more people should try it – but it’s an entirely different animal, and you’d better be prepared for that. And, by the way, the question of choosing a distribution could also be addressed in my program.&lt;/p&gt;
&lt;p&gt;What could be automated? I thought of two tasks: backups and saving a report about hardware and software installed, for reference. Both tasks are not &#39;1-click&#39; in Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For a backup, you shouldn’t save the &#39;home user directory&#39;. Instead, you should back up individual folders like &#39;Documents&#39;, &#39;Pictures&#39;, etc. But, surprise, folder names are localized in Windows! And if you’re migrating to Linux, you’d better go with a tar or tar.bz2 archive – it just works better for lots of files and folders.&lt;/li&gt;
&lt;li&gt;For a hardware report, it’s not that easy to find and save this information. I also decided to include printers and scanners, since they cause plenty of compatibility issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To develop this &lt;a href=&quot;https://github.com/ikostas/lmtk&quot;&gt;&#39;one-time-use app&#39;&lt;/a&gt;, I went with Python + Tkinter. Python is great for its libraries: getting hardware/software info, creating backups, generating Markdown reports, converting Markdown to HTML, and so on. Tkinter is an integrated GUI toolkit—outdated, sure, but fast, small, and stable. The resulting program was about 17 MB. Then I decided to localize it to German, and Python made that pretty easy. Later, I ran pylint and found so many errors – I honestly don’t know how it worked at all. But I had fun programming it, thinking about class structure and so on.&lt;/p&gt;
&lt;h2 id=&quot;how-it-s-going-a-new-challenge&quot;&gt;How it’s going: a new challenge&lt;/h2&gt;
&lt;p&gt;For the next fun project, I decided to create a GUI app for Linux. The idea was to manipulate PDF files, but also to build a chain of commands: extract pages 3–4 from one file, unite them with pages 1–2 from another, and so on. I personally use the CLI for these tasks, the only problem I have is forgetting the CLI parameters. So I thought: wouldn’t it be nice if I could save this chain of commands and reuse it? Nothing you can’t do with a bash script, though. :) Anyway, here are my requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The GUI should be nice and fast – and this excludes Python. Not only is it slow and single-threaded, I ran into some rough edges with the &#39;threads&#39; package when I tried to make the UI responsive. Still, Python gets credit for having great GTK4 bindings and PDF manipulation libraries.&lt;/li&gt;
&lt;li&gt;I’m not a programmer. I know Python, JS, and I took a course in Go at Codecademy (free, by the way). I didn’t like GJS; Go seemed like a reasonable choice. Goroutines allow threading, which makes the UI responsive, and the &#39;errors-first&#39; approach in Go makes handling user input nice. Yes, I know about Vala, I saw the tutorial, but I doubt I have the programming skills required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The program itself should look like three vertically stacked parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Files&lt;/strong&gt;: add and remove files; results of operations (e.g. splitting or uniting PDFs) also show up here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operations&lt;/strong&gt;: a chain of manipulations in a human-readable form; users should be able to add/remove operations and (in the distant future) change their order.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add an operation&lt;/strong&gt;: choose an operation type, which changes the number of input fields. For split, I need the pages and an output filename; for unite, I need the files and output filename; and so on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This UI implies lots of changes on the fly: I need to redraw parts of the UI, but I also need to handle faulty situations. For example, you can’t use a file if it’s only created in the next step. There’s a long list of &#39;what can’t be done&#39; and &#39;what to do if a filename or operation is removed&#39;, so this error-handling logic will be a significant part of the program.&lt;/p&gt;
&lt;h2 id=&quot;a-rabbit-hole&quot;&gt;A rabbit hole&lt;/h2&gt;
&lt;p&gt;And then the &#39;rabbit hole&#39; thing began: choosing a GUI library. I chaotically researched everything below, had chatbots write examples to see if I could handle them, and I hope my findings will be useful to someone. I’ll rate GUI libraries from simplest to most complicated:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://help.gnome.org/users/zenity/stable/&quot;&gt;Zenity&lt;/a&gt; is a great tool. You can use it with any language or even a bash script, but you’re not supposed to redraw parts of the UI – it’s like launching a single program. But it has a file-open dialog, and it can return multiple files. When I tried Fyne (which doesn’t allow selecting multiple files), I had to use Zenity as well.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pkg.go.dev/modernc.org/tk9.0&quot;&gt;Tk&lt;/a&gt;: sounds stupid because it’s old as hell, but it works. It has a new version (9), a new &#39;azure&#39; theme, and new Go bindings. So, if it’s stupid but it works – then it’s not stupid (C). It’s fast, works on Linux, Mac, and Windows (a bonus since Go also works cross-platform), it’s surprisingly stable, and it’s rich in widgets. I mean, if your grandpa could get away with these widgets, so can you. It requires simulating HTML, but I don’t need that for this app. So I stuck with Tk9.0 for now. I even considered writing my app in Tcl – it has procedures, loops, and ifs – but it’s too primitive. Go is nicer with structs, interfaces, goroutines, and all that. And surprise! Tk supports selecting multiple files in a file-open dialog. I felt like the Tk guys were my brothers: they think about functionality first.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.fyne.io/started/&quot;&gt;Fyne&lt;/a&gt; is the recommended Go GUI library, and it’s great. But I tried to write a single operation (extracting pages from a PDF), and Fyne implied using channels just to keep the UI responsive. That felt like overkill. I cried and vented to a chatbot, and it agreed: in this case, Fyne is probably too much.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/diamondburned/gotk4&quot;&gt;GTK4 bindings&lt;/a&gt; exist for Go. The funny part is that you can use &lt;a href=&quot;https://gitlab.gnome.org/jpu/cambalache&quot;&gt;Cambalache&lt;/a&gt; (a RAD tool) and call it from your Go logic. It’s a bit like the next, more &#39;cutting-edge&#39; approach: treating your GTK4 spec as a front-end. I couldn’t figure out why I should use these widgets, and GTK4 only works on Linux. I also doubted whether I’d be able to manipulate the UI easily by adding/removing data. Honestly, I miss React here.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wails.io/&quot;&gt;Wails&lt;/a&gt; (for Go) is a great approach: you use JS (probably React) for the front-end. It’s like &lt;a href=&quot;https://v2.tauri.app/&quot;&gt;Tauri&lt;/a&gt; for Rust or &lt;a href=&quot;https://www.electronjs.org/&quot;&gt;Electron&lt;/a&gt; for JS, with the same drawback: the output is always heavy (20 MB minimum). Yes, I considered Rust (Tauri’s footprint is a bit smaller), but my programming skills aren’t there. If your app is big and complicated anyway, this might be the way to go. React is awesome for declaring UIs and handling user input – I liked it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, now you’re ready to look at my work in progress, which I spent about a week building, covered in blood and tears (needed some drama here): a Go app with Tk9.0 and the azure theme:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/RuinuRqTxP-825.avif 825w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/RuinuRqTxP-825.webp 825w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/RuinuRqTxP-825.png&quot; alt=&quot;Add file&quot; width=&quot;825&quot; height=&quot;313&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;I think we need more high-quality GUI apps like this one. :) That’s all for today, folks – hope you enjoyed the ride! :)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bash Aliases I Use</title>
    <link href="https://en.kovchinnikov.info/2025-07-aliases.html" />
    <updated>2025-07-05T15:11:00Z</updated>
    <id>https://en.kovchinnikov.info/2025-07-aliases.html</id>
    <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;I&#39;ve realized I&#39;m too lazy to remember certain commands, but I&#39;m also just lazy enough to write bash scripts for them. The distinction isn&#39;t huge, as these are essentially one-liners. They significantly help me with blogging, backups, and Git workflows. If you&#39;re new to aliases, simply add these commands to your &lt;code&gt;~/.bashrc&lt;/code&gt; file, then type &lt;code&gt;source ~/.bashrc&lt;/code&gt; in your current session to activate them.&lt;/p&gt;
&lt;h2 id=&quot;blogging&quot;&gt;Blogging&lt;/h2&gt;
&lt;p&gt;I use 11ty for this blog. To preview a new article, I use:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias preview-blog=&#39;npx @11ty/eleventy --serve&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This starts a web server that instantly reflects all changes I make. To prepare the final version for GitHub, I use this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias post=&#39;npx @11ty/eleventy &amp;amp;&amp;amp; cd _site/ &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; read -p &amp;quot;Commit message: &amp;quot; msg &amp;amp;&amp;amp; git commit -m &amp;quot;$msg&amp;quot; &amp;amp;&amp;amp; git push &amp;amp;&amp;amp; cd ..&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just generates the blog, adds new files to git, commits them, pushes them to GitHub, and then returns to the main blog folder.&lt;/p&gt;
&lt;h2 id=&quot;backup&quot;&gt;Backup&lt;/h2&gt;
&lt;p&gt;Borg is an excellent solution for backups, but it&#39;s not the most user-friendly. Borgmatic, which essentially consists of Python scripts, makes it much easier to use. I configured it once and haven&#39;t had to think about it since. Now, to perform a backup to an external drive, I use this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias backup=&#39;borgmatic -c ~/.config/borgmatic.yaml&#39;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;converting-pdf-to-png&quot;&gt;Converting PDF to PNG&lt;/h2&gt;
&lt;p&gt;It was surprising to discover that, despite the abundance of tools for working with PDFs, there isn&#39;t a simple, short command to convert PDF to PNG. It&#39;s achievable using ImageMagick, but some options can be tricky. I simply need sequentially numbered files, and that&#39;s all:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias pdftopng=&#39;counter=1; for i in *.pdf; do magick $i -background white -alpha remove $counter.png; ((counter++)); done&#39;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;
&lt;p&gt;By &amp;quot;development,&amp;quot; I specifically mean JavaScript programming for Node.js. I have many Node projects, and I needed a single command to clean all of them at once, especially if I no longer need their &lt;code&gt;node_modules&lt;/code&gt; folders:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias clean-node=&#39;find . -name &amp;quot;node_modules&amp;quot; -type d -prune -exec rm -rf {} &#92;;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Some of these projects are in my GitHub repo, and I also took a course to learn more about Git. One command proved particularly useful:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias git-graph=&#39;git log --graph --decorate --oneline --all&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That&#39;s all for today. I hope you found something useful for yourself!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Debulking a Samsung Phone</title>
    <link href="https://en.kovchinnikov.info/2025-14-samsung.html" />
    <updated>2025-05-14T11:38:00Z</updated>
    <id>https://en.kovchinnikov.info/2025-14-samsung.html</id>
    <content type="html">&lt;p&gt;I like Samsung phones, the only thing I dislike about them is the default apps, which I was unable to remove from the phone. Now I did it, and here&#39;s what you need for that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A chat-bot to learn how to enable Developer Mode and USB Debugging&lt;/li&gt;
&lt;li&gt;A USB cable to connect your phone to a computer&lt;/li&gt;
&lt;li&gt;ADB on your computer&lt;/li&gt;
&lt;li&gt;Package Name Viewer app on your phone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I ended up deleting is below. I got rid not only of the apps (in the user profile only, without root access), but also of annoying context menus. It&#39;s so much better now!&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;com.samsung.android.app.interpreter
com.samsung.android.samsungpass
com.samsung.android.samsungpassautofill
com.diotek.sec.lookup.dictionary
com.samsung.android.app.spage
com.samsung.android.aremoji
com.samsung.android.aremojieditor
com.sec.android.mimage.avatarstickers
com.samsung.android.messaging
com.facebook.appmanager
com.facebook.system
com.facebook.services
com.samsung.android.app.contacts
com.samsung.android.dialer
com.samsung.android.arzone
com.samsung.android.authfw
com.sec.android.app.myfiles
com.samsung.android.themestore
com.sec.android.app.samsungapps
com.samsung.android.ardrawing
com.sec.android.app.billing
com.samsung.android.scloud
com.samsung.android.scpm
com.samsung.android.coldwalletservice
com.samsung.android.spayfw
com.samsung.android.dkey&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>3 Things, That Keep People Poor</title>
    <link href="https://en.kovchinnikov.info/2025-05-poverty.html" />
    <updated>2025-05-05T16:52:00Z</updated>
    <id>https://en.kovchinnikov.info/2025-05-poverty.html</id>
    <content type="html">&lt;p&gt;I&#39;m deeply convinced that poverty is one of the most important problems worth thinking about. I also see, that though often the circumstances are tough and objective, in many situations, it&#39;s the poverty mindset, that holds people back. This article is about overcoming this mindset, naming three points to improve the situation. It will not make anyone rich overnight, nor will it substitute consistent effort, sweat, and tears to overcome poverty, as well as the chances some of one don&#39;t meet on time. But will talk about what&#39;s in our circle of control.&lt;/p&gt;
&lt;p&gt;The points I will elaborate on here are not new, but I observe these signs of a poverty mindset and it makes me sad. How do I know, that these points work? Well, I saw it from my personal experience and the experience of other people, although one could argue that something else worked out in those cases. How do I know, that they are the most important? Well, I don&#39;t have any scientific background for this as well, although it would be hard to measure the mindset or the mood, the things people believe in, though it&#39;s not a religion.&lt;/p&gt;
&lt;p&gt;Ok, what are we talking about here? Here are these points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comparing yourself to others&lt;/li&gt;
&lt;li&gt;Expecting life to be fair&lt;/li&gt;
&lt;li&gt;Not investing in your leap forward&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nothing new here, as I noted before. The order is important though and I&#39;ll also try to explain why these three are more important. The following text is going to be a purely logical essay; please correct me if I&#39;m wrong, if I come from the wrong prerequisites, or if my logic is false or not applicable in some cases. If fits 80% of cases and someone finds it helpful, I&#39;d be quite happy.&lt;/p&gt;
&lt;h2 id=&quot;1-comparing&quot;&gt;1. Comparing&lt;/h2&gt;
&lt;p&gt;It hurts me so much when I see how people make themself miserable, comparing themselves to each other. It&#39;s like social media: often we see only fancy pictures, and we don&#39;t care how much it was edited or how much effort or sacrifices it took. Everyone has different starting conditions and abilities, but I&#39;m going to try to persuade you not to do it by enumerating the consequences, not by saying that comparison is unfair. Let it be unfair, the point is that we all have limited resources in terms of time and energy. Comparisons suck for time and energy, which we could invest in something different, see below.&lt;/p&gt;
&lt;p&gt;The rule here is that one shouldn&#39;t compare oneself to anyone, but him-/herself in the past. I worked in consulting, they had a great wording: just stop doing it. It doesn&#39;t have any positive consequences, only negative ones. And we should judge the action by its consequences. And I believe no one needs extra motivation or routine, it&#39;s just as simple as that: stop doing it. And there&#39;s no other good time to stop doing it, other than right now. You also can&#39;t limit it, it will find a way to grow otherwise.&lt;/p&gt;
&lt;p&gt;There&#39;s one exception though: if you see someone as a role model, understanding the motives and how the person came to some state, could help. The role model can apply to some areas only: family work studying or friends. I wouldn&#39;t dare to recommend it, but when once I found myself in a company, where I couldn&#39;t see any role models for any areas, I left the company and never felt a regret. It also should be noted, that some things are shiny on the surface, so if you could have a deep conversation with this &#39;role model&#39; person regarding happiness and motivation, it could help to move forward. In the worst case, if you could find that the person is unhappy, then maybe this role model is not worth following.&lt;/p&gt;
&lt;h2 id=&quot;2-fair-life&quot;&gt;2. Fair life&lt;/h2&gt;
&lt;p&gt;There&#39;s enough information and educational resources on why we shouldn&#39;t expect life to be fair. For me it makes no sense to expect something, that doesn&#39;t exist and has no foundation to exist, the life just functions differently: we have independent agents, who make profitable decisions for themselves. I know the adults, who believe that life should be fair and get upset when it&#39;s not. Life isn&#39;t fair, not virtually, nor physically. Stop being a child and believing in things, that do not exist. And welcome to my world, the real one.&lt;/p&gt;
&lt;p&gt;Still, I need to comment on random opportunities or chances. We don&#39;t manage them, but we can take advantage of them when we are ready. And for that, we need to have a goal and make some progress moving towards this goal using hard work. In other words, the ability to use random chances depends on hard work. If you want to point at someone, who had great chances and used them without hard work, it means exactly one thing: you didn&#39;t get the first section regarding comparison. You see, I enumerated them, it&#39;s that simple: first things first. You get the first point, then you get to the second.&lt;/p&gt;
&lt;h2 id=&quot;3-investing&quot;&gt;3. Investing&lt;/h2&gt;
&lt;p&gt;Let&#39;s start with our limited resources once again. I suppose we cut the leakages, comparing or expecting life to be fair. Eliminating the leakage will not make progress for us, it takes deliberate action. What action should that be? Well, I think of it in military terms, although I&#39;m not an officer myself: we define the target, concentrate resources, and charge at the weakest point. Who&#39;s the enemy? The biggest obstacle. In human society, simplifying things, only skills matter: experience can be acquired. What I see most of the time, is a lack of skills as the obstacle. How do you overcome it?&lt;/p&gt;
&lt;p&gt;By the way, formal education is not the worst variant. It works and it helped me and some other people, I mean even second higher education. It&#39;s time-tested and it mostly works, but nowadays we have more options, including paid courses on the Internet, or free resources, including YouTube. My point: we concentrate time and effort in one direction, that&#39;s the most important thing.&lt;/p&gt;
&lt;p&gt;The obvious errors are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choosing the wrong target&lt;/li&gt;
&lt;li&gt;Investing money only&lt;/li&gt;
&lt;li&gt;Not investing money and time consistently&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s a risky endeavor, even doing everything consistently you can fail. Sometimes you take the risks, that&#39;s it. If you do nothing, it&#39;s at least strange to expect a different output like a new job or a positive career turn. If you spread your efforts, thinking that you manage the risks, a single direction doesn&#39;t get enough resources, and you fail as well. And if you fail, at least you get new information. I think the information about fake targets is valuable. The skill to take risks and push them until it&#39;s obvious that it failed is also valuable, sometimes it takes a few iterations to take a good target.&lt;/p&gt;
&lt;p&gt;Regarding fake targets, you can notice them from afar, like buying a shiny franchise. The points advertised will be low effort, just buying stuff, and making you rich fast. Acquiring any skills is valuable anyway, as skills are transferable between professions. So, if the target is not fake, in the worst-case scenario you get experience and skills, and you almost get used to thinking, when you take the risk next time. You will have, because expecting the future to be certain is even more weird than expecting life to be fair.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>An Express Web App</title>
    <link href="https://en.kovchinnikov.info/2024-11-express.html" />
    <updated>2024-11-24T22:00:00Z</updated>
    <id>https://en.kovchinnikov.info/2024-11-express.html</id>
    <content type="html">&lt;p&gt;As promised, I&#39;d like to write about my personal Express.js experience. A brief disclaimer: I know it&#39;s considered outdated, and I know everyone is writing with bun + Hono + TypeScript, but I have to say something. I compared Express.JS + JavaScript for single-man small projects with the following options, which I call web frameworks for non-programmers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Ruby on Rails&lt;/li&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And my criteria are a bit special:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sticking to the standards, like HTTP requests. I got some pain with POST/GET-only requests with Django.&lt;/li&gt;
&lt;li&gt;Performance, not so slow as these three. :) I also like the idea of having more advanced architecture, although I don&#39;t understand much about software architecture. :)&lt;/li&gt;
&lt;li&gt;Some automation like migrations, which is quite nice with Sequelize (I know everybody uses Prisma). But Django migrations are better. :(&lt;/li&gt;
&lt;li&gt;Templates with minimal effort, so I like Pug. More on that below.&lt;/li&gt;
&lt;li&gt;I&#39;d like to build a front-end as simple as possible with HTMX and some CSS library (PicoCSS in my case). You can do that with any framework by the way, I just explained my choice for UI/UX here.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;fixing-express&quot;&gt;Fixing Express&lt;/h2&gt;
&lt;p&gt;The widely known drawback of the JS ecosystem is that it&#39;s very fragmented, and it&#39;s hard to figure out what to pick for your needs. And it turns out that reading the express.js manual helps, at least it helped me. To get a nice app structure, you could use something like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; express
npx express-generator &lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt; pug &lt;span class=&quot;token parameter variable&quot;&gt;--git&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea here is to get something similar to Django in terms of the structure. There was MVT (model-view-template), and we got to an MVC (model-view-controller). Express generator doesn&#39;t create separate files for controllers, but it&#39;s not complicated to do. After that, I got to a structure I liked, and I almost have my urls.py now! That&#39;s fine because this structure allows you to concentrate on writing the code and not think much about the structure anymore.&lt;/p&gt;
&lt;h2 id=&quot;regarding-pug&quot;&gt;Regarding Pug&lt;/h2&gt;
&lt;p&gt;I fully understand why the mainstream is now with JSX and other HTML-based templating engines. Again, my tastes and requirements are very specific:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&#39;d like to write minimal code to generate HTML&lt;/li&gt;
&lt;li&gt;I don&#39;t like to mess up with closing tags&lt;/li&gt;
&lt;li&gt;I&#39;d like to have a programming language inside templates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The syntax with meaningful indents resembles Python, and that&#39;s not bad at all if you ask me. Returning to the old templates and modifying them is as painful as it can be, just because I don&#39;t mess up with the angle brackets. And I didn&#39;t see any alternative to Pug in this regard. And I didn&#39;t migrate to another framework just because Express.js has basic routing and Pug support. That&#39;s all you get, and that&#39;s all I need. In my current app under development, I spend a lot of time writing templates, so it paid off.&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;Regarding the CSS, I fully understand why everyone is using Tailwind.css, but I just don&#39;t need all that, and the functionality is primary to me. I tried some styles and am completely satisfied with Pico.css. The forms are great there, and I use forms heavily. I work mostly with the placement of the elements on the page, not with their appearance. And I&#39;m quite happy with that for now. By the way, Pico.css has some CSS-only nice interactive elements like accordions.&lt;/p&gt;
&lt;h2 id=&quot;htmx&quot;&gt;HTMX&lt;/h2&gt;
&lt;p&gt;HTMX allows you not to reload a full page, and that&#39;s what AJAX is about. And HTMX is a user-friendly interface for AJAX. You have to invest some time to learn how to use HTMX and what level of interactivity you can get. It&#39;s opposite to the React approach, for example: there you have an interactive app, you need JSON from the back-end, and you don&#39;t think about it at all. Here you &lt;strong&gt;need&lt;/strong&gt; to think: about what&#39;s on the back end, what&#39;s in HTMX, and how to change the back end because of that. After that, you get some real-world use cases for HTMX. I first developed a page without HTMX and then added HTMX to improve user experience. If it doesn&#39;t work out, I just return to a static page. Sometimes I had several iterations, for example with tables.&lt;/p&gt;
&lt;p&gt;It&#39;s easy to delete a row from the table, but when you add a row, you need to know: should I add a table header as well? I thought for some time about that, and I didn&#39;t like this idea: I needed a lot more code on the back end, so I stayed away from HTMX. But then I thought: it&#39;s useful to redraw a table alone in this case, there&#39;s no &#39;if&#39; for the table header.&lt;/p&gt;
&lt;h2 id=&quot;sequelize&quot;&gt;Sequelize&lt;/h2&gt;
&lt;p&gt;The reasoning behind choosing Sequelize was its pure-JS nature. I just compared the code I needed in Prisma and Sequelize for the same task. Sequelize is also not a full-auto migrations generator like Django, but you can generate a database structure and a migration with one command. It makes you think about the structure beforehand, but the structure &lt;strong&gt;is&lt;/strong&gt; important. In terms of learning, it&#39;s useful and not so hard.&lt;/p&gt;
&lt;h2 id=&quot;typical-tasks&quot;&gt;Typical tasks&lt;/h2&gt;
&lt;p&gt;Regarding logging the users in, I know that JWS-tokens are the best, but I failed to implement it and backed to &lt;code&gt;express-session&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For file uploads, I used &lt;code&gt;multer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I like using Markdown, so I ended up using &lt;code&gt;marked&lt;/code&gt; for that.&lt;/p&gt;
&lt;h2 id=&quot;the-workflow&quot;&gt;The workflow&lt;/h2&gt;
&lt;p&gt;Experience with Django helped a lot to figure out the most important thing – my development workflow. I mean something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding tables to the database and migrations with the Sequelize CLI&lt;/li&gt;
&lt;li&gt;Adding routes&lt;/li&gt;
&lt;li&gt;Adding templates&lt;/li&gt;
&lt;li&gt;Adding controllers&lt;/li&gt;
&lt;li&gt;Modifying routes, templates, and controllers to add HTMX&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trick is that this workflow is described in lots of tutorials and courses for Django, but it&#39;s impossible to find a similar tutorial for Express. Just because Express is so non-opinionated and lots of components exist. The components combination and the workflow can be different in each case, so Django was a template that worked for me. When you are looking for an Express tutorial, in many cases you find tutorials for MongoDB, but it&#39;s so different, that it changes the application logic. And that was the major difficulty for me.&lt;/p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Compared to Django, I think I progressed in many ways with the web app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I write less code, and it&#39;s not more high-level; it&#39;s more meaningful, I would say.&lt;/li&gt;
&lt;li&gt;I spend less time with the templates, and this time is more pleasant.&lt;/li&gt;
&lt;li&gt;I added interactivity to the app with HTMX and enhanced UI with Pure.css.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ve heard one thought from &lt;a href=&quot;https://www.youtube.com/@ThePrimeTimeagen/&quot;&gt;Primagen&lt;/a&gt;: the best framework is the framework you enjoy working with the most. Thus you can progress better and faster. Now I feel not constrained to implement my ideas, I have some more ideas to implement, and I don&#39;t find it complicated. I wish you could feel it, it&#39;s a very pleasant feeling.&lt;/p&gt;
&lt;p&gt;If you made it this far, you may be interested in checking &lt;a href=&quot;https://github.com/ikostas/pmo-express&quot;&gt;my git repo&lt;/a&gt; for my ugly web app.&lt;/p&gt;
&lt;p&gt;That&#39;s all for today, see you! More ugly web apps are to come! :)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to Get New Ideas</title>
    <link href="https://en.kovchinnikov.info/2024-11-newideas.html" />
    <updated>2024-11-24T19:04:00Z</updated>
    <id>https://en.kovchinnikov.info/2024-11-newideas.html</id>
    <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Writing web apps is a thrilling adventure. Web apps allow many people to interact and thus create something great. But where to get ideas on what to write? I tried to look at Github stars and their projects, the projects that get lots of stars on Github and that didn&#39;t work for me. It was just too far away from my skills with the web apps, I needed something real-world small tasks, so I started to look around and just started building things. At the end of the 4th project, new exciting ideas started to come, and I&#39;d like to share this experience and this approach with you. You could also comment, on whether it worked for you.&lt;/p&gt;
&lt;p&gt;Disclaimer: I&#39;m not so good at building web apps, but I&#39;m a lot better at talking about it. :) I&#39;ll still provide links to my Github repo if you are interested.&lt;/p&gt;
&lt;h2 id=&quot;the-purpose&quot;&gt;The purpose&lt;/h2&gt;
&lt;p&gt;Again, that was a fun and rewarding experience, tell me what you think, if you made it this far. :)&lt;/p&gt;
&lt;p&gt;Building 4 apps sounds like a lot of work, and it is so. You need to stay motivated during this trip, it&#39;s very easy to give up, so here are my motivation tips, some of which are repeated from the &lt;a href=&quot;https://en.kovchinnikov.info/2024-05-webapp.html&quot;&gt;previous article&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, we need to get experience building web apps for real-world tasks, so we can explore real-world requirements in detail and understand, what &#39;automation&#39; actually means in every particular small case and line of code&lt;/li&gt;
&lt;li&gt;Second, if you work as a product manager, it&#39;s exciting to explore developers&#39; work. It&#39;s the second exciting thing to explore for me, after user support. :)&lt;/li&gt;
&lt;li&gt;Third, it&#39;s great, in my opinion, to learn what the buzz about new technologies is about, what they look like, and how it feels working with them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ll stop here, but there are a lot of more exciting fruits waiting for you, so let&#39;s go! I have 4 stories to tell:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Messages&lt;/li&gt;
&lt;li&gt;Home office&lt;/li&gt;
&lt;li&gt;Time-tracking&lt;/li&gt;
&lt;li&gt;Resource planning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ll similarly structure every story:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What the existing app does&lt;/li&gt;
&lt;li&gt;The requirements – the ideas that they bring were sometimes innovative for me and fun to explore by themselves!&lt;/li&gt;
&lt;li&gt;The app: I&#39;ll briefly describe, what the app does.&lt;/li&gt;
&lt;li&gt;What I learned: what was fun, what was not, what I learned about the tools, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&#39;s a link to the Github repo, so you could explore my ugly code. :)&lt;/p&gt;
&lt;h2 id=&quot;messages&quot;&gt;Messages&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Existing app functions&lt;/strong&gt;: there was an existing app, developed using Microsoft Power Platform. The entrance was free, but then you should pay, depending on the transaction number. But in our situation there were two other major drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have field workers, who do not necessarily have emails. And with Microsoft, you always need to stick to their eco-system. And every corporate email using Exchange costs money.&lt;/li&gt;
&lt;li&gt;I found a video about low-code apps, and it turns out that the generated code is a mess, you can&#39;t do anything with it if you&#39;d like to have something non-standard.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The functions were to create messages of different types and save them. Then there&#39;s a &#39;Microsoft list&#39; to have these messages in a table, where you can edit and delete them. The fields for each message type are a little bit different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;. We need to manage the accounts: create accounts, log in/logout, have some roles, and limit the functions based on the user roles. After that, I&#39;d just duplicate the messages, but I&#39;d like to have a little bit more fancy interface to edit or delete a message. It&#39;s also logical to have a message status: open/closed. And for this, we need functions to close or re-open the messages. To collaborate we need comments for each message.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My app functions&lt;/strong&gt;. I implemented all the requirements, including the roles. Also, I implemented a migration to have some default roles in a newly installed app.&lt;/p&gt;
&lt;p&gt;Initial menu:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/TgOjB2j2qp-256.avif 256w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/TgOjB2j2qp-256.webp 256w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/TgOjB2j2qp-256.png&quot; alt=&quot;Initial menu&quot; title=&quot;Initial menu&quot; width=&quot;256&quot; height=&quot;182&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;List of messages:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/O7v3stvtu6-1329.avif 1329w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/O7v3stvtu6-1329.webp 1329w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/O7v3stvtu6-1329.png&quot; alt=&quot;List of messages&quot; title=&quot;List of messages&quot; width=&quot;1329&quot; height=&quot;347&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;A form to edit a message or leave comments:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/QDtD9xQmn--409.avif 409w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/QDtD9xQmn--409.webp 409w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/QDtD9xQmn--409.png&quot; alt=&quot;Edit a message&quot; title=&quot;Edit a message&quot; width=&quot;409&quot; height=&quot;913&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Admin interface:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/uQMujHO2kq-692.avif 692w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/uQMujHO2kq-692.webp 692w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/uQMujHO2kq-692.png&quot; alt=&quot;Admin interface&quot; title=&quot;Admin interface&quot; width=&quot;692&quot; height=&quot;660&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;. Login and authentication/authorization functions are tricky and that&#39;s the strong point in Django. It even has roles. I also leveraged the admin interface not to write more than half of the app myself. Reloading the whole page is fast, for example, deleting a message and reloading a list of the messages, and it&#39;s not disturbing at all even without HTMX. I also used a CSS library and Google Material Symbols, so I was able to make a mobile interface as an adaptive page layout. Working with migrations is automated in Django, it speeds up the development as well.&lt;/p&gt;
&lt;h2 id=&quot;homeoffice&quot;&gt;Homeoffice&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Existing app functions&lt;/strong&gt;. The existing app was an Excel list, which is rather smart if you ask me. In rows we have employees, in columns, we have dates from the current month. Copying the cell formatting from a template you can indicate for others, that you work at home, are on a business trip, are ill, have a vacation or it&#39;s a holiday for the whole company. The &#39;hack&#39; I found nice was that they use one letter and a colored background to indicate an event, so the whole table is very compact. You could also add a comment to a cell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;. The problem with Excel is obviously that it&#39;s a single-user &#39;app&#39;. There are also no permissions, so normally an employee should not be able to edit events for other employees; only managers should be able to do that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My app functions&lt;/strong&gt;. I decided to leverage the function of the web app to display the same data in different views, so I added a &#39;My calendar&#39; view to view only my events. The calendar was also interesting to play with: I knew the current date and thus was able to display the current month by default (Excel displayed what the last user saw). I decided to display one month at a time only, and I gave a user a function to choose a month. I also added a setup table to add event types and choose a background color (type in HTML color) for this event type. And I have roles to &#39;edit my events&#39; and &#39;edit all events&#39; (a manager).&lt;/p&gt;
&lt;p&gt;A calendar:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/WCUxIeTJit-921.avif 921w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/WCUxIeTJit-921.webp 921w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/WCUxIeTJit-921.png&quot; alt=&quot;Calendar&quot; title=&quot;Calendar&quot; width=&quot;921&quot; height=&quot;614&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;My calendar:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/A5JFysXtVS-494.avif 494w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/A5JFysXtVS-494.webp 494w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/A5JFysXtVS-494.png&quot; alt=&quot;My calendar&quot; title=&quot;My calendar&quot; width=&quot;494&quot; height=&quot;738&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt; Working with the calendar makes you learn a lot: I ended with 3-dimensional arrays. But I needed more, and here template limitations come into play. A lack of variables is a major drawback, so I wrote a lot of code to convert data for a template and a lot of code in the template to convert data for a display. And it wasn&#39;t fun at all. I tried different designs, I also used classes to minimize the code. The calendar app pissed me off and made me think about switching to another framework, which is also a good result, I suppose.&lt;/p&gt;
&lt;h2 id=&quot;time-tracking&quot;&gt;Time-tracking&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Existing app functions&lt;/strong&gt;. We have two apps: a full-time-tracking web app, which we rent, and Excel. In a web app, you can start/stop the time, have pauses, and so on. In Excel you have a tab for a month, you need to enter your working time overall, time off, and time per project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;. I decided to clone an &#39;Excel app&#39;, but enhance it with a few automation: take info from the homeoffice table by default, and add some checks to make sure that the number of hours match.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My app functions&lt;/strong&gt;. I didn&#39;t finish the app, because I stuck to Excel form with new functions. The complexity of the logic was a bit overwhelming for my skills. But the idea is that when the user opens the month, a time sheet is created based on the data in home-office.&lt;/p&gt;
&lt;p&gt;Standard working hours setup:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/U-fIZrGh4s-534.avif 534w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/U-fIZrGh4s-534.webp 534w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/U-fIZrGh4s-534.png&quot; alt=&quot;Standard working hours&quot; title=&quot;Standard working hours&quot; width=&quot;534&quot; height=&quot;793&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;A time-sheet:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/W2RHX0fjGc-987.avif 987w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/W2RHX0fjGc-987.webp 987w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/W2RHX0fjGc-987.png&quot; alt=&quot;Time-sheet&quot; title=&quot;Time-sheet&quot; width=&quot;987&quot; height=&quot;808&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;. This level of complexity was a little bit too much for me, but I was able to demonstrate, that in a web app, you can use the data from one app in another app. And that&#39;s where automation starts. One more important outcome for me is to clarify the task before programming it. It doesn&#39;t become clearer while programming by itself. Python in general has some &#39;export to Excel&#39; functions, but I didn&#39;t get to that. The app served its purpose, and I wasn&#39;t motivated to finish it, because I knew we wouldn&#39;t use it anyway.&lt;/p&gt;
&lt;h2 id=&quot;resource-planning&quot;&gt;Resource planning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Existing app functions&lt;/strong&gt;. Workers and cars are planned daily in an Excel table for the project, which is a number and a location. Then updated table is sent using a messenger. What was unexpected, is that it&#39;s useful for them to know &#39;who is where&#39;. It was also obvious, that Excel was overcomplicated because there were a few ways to do one thing, to show that the worker was ill, for example.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;. The owner of this table agreed that the view should be changed, so I googled for some examples, and from the &#39;project-day&#39; table I came to the &#39;worker/car-day&#39; table. Regarding illnesses and vacations, I had this in &#39;Homeoffice&#39; already, so I could use that. I also had a &#39;my calendar&#39; view to see the tasks for a worker within a month and the car he/she has for these tasks. And the top idea was to add notifications to a messenger when the event was changed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My app functions&lt;/strong&gt;. I coded this app in 4 days because I had all the functions to work with the calendar and add/edit/delete events. I added a &#39;service event&#39; for a car. By the way, it was great to inherit &#39;my calendar&#39; class and extend it. I didn&#39;t code the notifications to the messenger, but generally, it&#39;s possible. Again, not on my skill level.&lt;/p&gt;
&lt;p&gt;Resource planning:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/1Pstb3veV3-822.avif 822w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/1Pstb3veV3-822.webp 822w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/1Pstb3veV3-822.png&quot; alt=&quot;Resource planning&quot; title=&quot;Resource planning&quot; width=&quot;822&quot; height=&quot;872&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;My plan:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://en.kovchinnikov.info/img/6ja8RM-eQ2-1125.avif 1125w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://en.kovchinnikov.info/img/6ja8RM-eQ2-1125.webp 1125w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://en.kovchinnikov.info/img/6ja8RM-eQ2-1125.png&quot; alt=&quot;My plan&quot; title=&quot;My plan&quot; width=&quot;1125&quot; height=&quot;584&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;. When you have a good problem statement, a live user able to discuss his/her requirements, and a real pain to resolve, it can be a lot of fun to develop an app. Besides, I had programmed some classes and functions before that, so it was encouraging to show the result for the user so fast.&lt;/p&gt;
&lt;h2 id=&quot;a-video&quot;&gt;A video&lt;/h2&gt;
&lt;p&gt;A very important point and a step is not to be shy and to make a video about your app(s) and share it with the world. I made a video for my colleagues, and they liked it. I had several bullet points to cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-user apps vs. Excel&lt;/li&gt;
&lt;li&gt;Apps for Microsoft ecosystem vs. opensource tools&lt;/li&gt;
&lt;li&gt;The cost of ownership for an app&lt;/li&gt;
&lt;li&gt;The case for writing your app&lt;/li&gt;
&lt;li&gt;The marketplaces for hiring freelance developers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I finished the video, it seemed that I started to understand some of the topics mentioned above. :) Seriously, it&#39;s hard to stop a development, and when you make a video, you reflect on your experience, you notice what could be done better, and you make a snapshot of the current app&#39;s version. It&#39;s a very important and underestimated step to get new ideas because you have to analyze the tasks and the solutions from a high level one more time. If you want to go further with the app development, just put a link to a video on your GitHub page, and it will contribute to the app&#39;s popularity!&lt;/p&gt;
&lt;h2 id=&quot;the-real-world-outcome&quot;&gt;The real-world outcome&lt;/h2&gt;
&lt;p&gt;My colleagues made some conclusions after watching my video, not quite what I expected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transactional DB-based systems are better than Excel&lt;/li&gt;
&lt;li&gt;They&#39;d like to have an all-in-one system to minimize administration efforts&lt;/li&gt;
&lt;li&gt;They looked attentively at opportunities to develop their apps and decided not to do that :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I enjoy doing the job where I get more, so that&#39;s what I&#39;ve learned in general:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are great lean non-standard solutions to standard problems in terms of requirements. And I didn&#39;t expect that!&lt;/li&gt;
&lt;li&gt;It&#39;s not difficult at all to create your web app with Django.&lt;/li&gt;
&lt;li&gt;Writing an app with Django sometimes leads to writing a lot of code, which (I assume) I shouldn&#39;t be writing: maybe I need another patterns or algorithm knowledge, maybe I need another tool (so I started writing with Express.js and I write very little code indeed).&lt;/li&gt;
&lt;li&gt;Django has some &#39;strong choices&#39; regarding the app structure, which are good and which I&#39;d like to have in Express.js, for example. I hope to write the next article about writing Express.js the Django way, so stay tuned. :)&lt;/li&gt;
&lt;li&gt;Django has some limitations, with which it&#39;s not worth studying for me further, even with some front-ends or HTMX.&lt;/li&gt;
&lt;li&gt;It&#39;s great to have some corner cases like working with the calendar when you can thoroughly evaluate your toolset; the calendar makes you work with the tables, and it differs from working with single values a lot; I like the tooling from JS for arrays more.&lt;/li&gt;
&lt;li&gt;When the platform sticks to the standards like HTML and HTTP, it&#39;s great. For example, Django has only get and post requests, and I got tired of using these two types only, and the routing table becomes ugly quickly.&lt;/li&gt;
&lt;li&gt;A lot of time developing a web app is spent writing templates, and an easy option like Pug works great for me. Maybe JSX is more like HTML (and I contradict myself from the previous point), but I get HTML fatigue from Django templates.
The back-end-only app is easy to develop and quite feasible to develop alone, and it&#39;s highly functional, but it needs some revival, at least like HTMX. On the other hand, I&#39;m not assured that a front-end app is needed at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, that was a fun and rewarding experience; tell me what you think if you made it this far. :)&lt;/p&gt;
&lt;p&gt;The github repo is &lt;a href=&quot;https://github.com/ikostas/meldungen&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I&#39;ve Migrated the Blog</title>
    <link href="https://en.kovchinnikov.info/2024-11-blogupdate.html" />
    <updated>2024-11-11T19:04:00Z</updated>
    <id>https://en.kovchinnikov.info/2024-11-blogupdate.html</id>
    <content type="html">&lt;p&gt;Hi everyone, a quick update about the blog. I&#39;ve migrated to 11ty, maybe Python is not fun anymore. :) I&#39;d like to mention a few upgrades (and one downgrade), which I did by the way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Font Awesome instead of icons for social network links&lt;/li&gt;
&lt;li&gt;Local search, powered by Pagefind, instead of Google search&lt;/li&gt;
&lt;li&gt;Dark theme&lt;/li&gt;
&lt;li&gt;PicoCSS&lt;/li&gt;
&lt;li&gt;I didn&#39;t integrate Disqus this time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the focus is on usability and speed, I hope you&#39;ll like it!&lt;/p&gt;
&lt;p&gt;P.S. I really think I should change something from time to time, just for the sake of changing.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>We&#39;re Writing a Web App</title>
    <link href="https://en.kovchinnikov.info/2024-05-webapp.html" />
    <updated>2024-05-16T19:18:00Z</updated>
    <id>https://en.kovchinnikov.info/2024-05-webapp.html</id>
    <content type="html">&lt;h2 id=&quot;why-write-a-web-app-1&quot;&gt;Why write a web app #1&lt;/h2&gt;
&lt;p&gt;I wrote a lot about learning Linux tools and using them effectively. The question is what do we do with that? Or: what&#39;s next regarding personal development? What I&#39;ve noticed, is that a lot of people tend to go into system administration, meaning setting up server applications. Here I should mention &lt;a href=&quot;https://www.ubuntupit.com/&quot;&gt;UbuntuPit&lt;/a&gt; as a great source for these projects. This path has a few drawbacks, although it&#39;s useful for learning what exists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are limited to the tools which are already available&lt;/li&gt;
&lt;li&gt;It can be frustrating because if it doesn&#39;t work, you&#39;re stuck; you&#39;re unable to modify the source code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think learning programming is beneficial regarding personal development, having new challenges, and so on. But why create a web app?&lt;/p&gt;
&lt;h2 id=&quot;why-write-a-web-app-2&quot;&gt;Why write a web app #2&lt;/h2&gt;
&lt;p&gt;For simplicity, we can distinguish the two app types: those intended for individual use and those intended for collaborating with others. It tends that people are hugely more productive when they collaborate (no, I don&#39;t mean boring Zoom meetings), while personal productivity is limited. If we have a new app, the more people use it, the more productive, potentially, they can get. So what types of apps exist to interact with each other:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command-line apps (CLI) are the easiest to write, and are fun to start with, but the visualization is limited&lt;/li&gt;
&lt;li&gt;Graphical desktop apps are great, but you (normally) need special tools for Linux, Mac and Windows&lt;/li&gt;
&lt;li&gt;Mobile apps have several platforms as well, Android and iOS&lt;/li&gt;
&lt;li&gt;The web apps, finally&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The web apps are displayed in any standard-conformant browser, but they can also have a special mobile layout and they can be converted to mobile apps (or lite mobile apps) – being a mobile app, just cashing the assets for a faster display. At first, we could start even without that, and we&#39;ll be able to open our web app on any platform in any browser when the app and the browser stick to the standards. It motivated me to start, but to manage your expectations you should be probably aware of some drawbacks.&lt;/p&gt;
&lt;h2 id=&quot;why-its-hard&quot;&gt;Why it&#39;s hard&lt;/h2&gt;
&lt;p&gt;It&#39;s just hard to make web apps, and the list of the reasons can be very long:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The tools to build web apps are less sophisticated, than IDEs for mobile or desktop apps. Sometimes it seems like you&#39;re back in time and you don&#39;t have the tools desktop developers already have. Nevertheless, you can start development with any text editor and it takes some practice to feel comfortable in this environment.&lt;/li&gt;
&lt;li&gt;Web dev is not so much about dev. You have three parts (normally): a front-end, a back-end, and a database. You&#39;ll spend a lot of time messing with joining these parts together and looking for errors &#39;in-between&#39;. Sometimes you&#39;ll find yourself spending 80% of your time creating front-end because it&#39;s all about tiny details. So, you have less time for the logic of the app.&lt;/li&gt;
&lt;li&gt;The number of web frameworks is overwhelming, and it took me several months to choose one (so you don&#39;t have to), and I&#39;m still in the process.&lt;/li&gt;
&lt;li&gt;Choosing components for the front end, choosing a database engine, and choosing a back-end framework can be overwhelming too.&lt;/li&gt;
&lt;li&gt;All this makes the progress relatively slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s not that technically hard, but it puts a moral toll on you when you&#39;re moving not that fast or (what I did several times) you have to choose another framework for your app and rewrite everything.&lt;/p&gt;
&lt;p&gt;The tools you have, again for simplicity, can be divided into the things you can easily get without and the things you should know. But in what order to learn them? Well, ...&lt;/p&gt;
&lt;h2 id=&quot;learning-the-web-from-a-historical-perspective&quot;&gt;Learning the web from a historical perspective&lt;/h2&gt;
&lt;p&gt;I came to this idea recently, and I think it makes some sense: you could learn web technologies in the order they evolved because that happened for a reason. A reason for that was that humanity (or developers) came to some limitations with technology, so they invented a new technology until they had a better idea. I suggest that you learn in this order and the sign that you learned something is that you &lt;strong&gt;feel&lt;/strong&gt; the limitations of a technology. This means you are probably ready for the next step.&lt;/p&gt;
&lt;p&gt;Roughly speaking, the sequence was like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static web meaning HTML and CSS, are the basics.&lt;/li&gt;
&lt;li&gt;Relational databases meaning SQL.&lt;/li&gt;
&lt;li&gt;Basic back-end framework, here I was quite happy to start with &lt;a href=&quot;https://flask.palletsprojects.com/&quot;&gt;Flask&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Opionated back-end framework, which gives you at least a variant, of how this could be done. I&#39;m here now and I&#39;m starting to feel the limits of &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Non-opinionated modern back-end framework, it seems that &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express JS&lt;/a&gt; is quite popular, and I&#39;m targeting it now.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are a lot of things like React/Angular/Vue or Next.js/Nuxt.js, I just don&#39;t understand what limitations would make me use them. Generally maintaining focus and taking one step at a time is a good idea, from my experience, for the reason I&#39;ve already mentioned: the number of frameworks is overwhelming. And there&#39;s a bit of hype, too.&lt;/p&gt;
&lt;h2 id=&quot;what-i-ve-learned-so-far&quot;&gt;What I&#39;ve learned so far&lt;/h2&gt;
&lt;p&gt;I&#39;ll go through the same list from the previous section to note my conclusions and let a lot of people laugh at them. :)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static means you can&#39;t change anything, but when you generate the static code on the server it&#39;s generally more stable, just because the client side is simple. Unless you need an interactive app like a game or an interactive map, you can go further with HTML and CSS. There are plenty of ready CSS styles as well.&lt;/li&gt;
&lt;li&gt;SQL databases are great when you understand what&#39;s going on. If you can model a data structure beforehand, I see no drawbacks, although I get the idea that NoSQL databases speed up the development. I&#39;m just old, so I stick to SQL. Some frameworks have tools to write platform-independent SQL, I&#39;m also happy to use that.&lt;/li&gt;
&lt;li&gt;I was stuck with Flask and the authentication task. The number of modules you have to find and include is a bit overwhelming just to do the basic things. It blurs a bit the whole picture of what&#39;s going on, but maybe it&#39;s a perfect place to start because you get the basics without too complicated concepts and you get a result fast.&lt;/li&gt;
&lt;li&gt;I&#39;m working with a calendar app, and now the idea of having a very limited language in the templates doesn&#39;t feel right. Yes, you could use Django as an API for a front-end app, but I was eager to leverage all of its advantages, fast models and fast templates being among them.&lt;/li&gt;
&lt;li&gt;When you step on JS and Express territory, you again have to choose the modules and you also feel the absence of documentation, compared to pythonic tools and specifically Django. It sucks, but there&#39;s a reason it&#39;s so popular, and it&#39;s interesting to find it out, so my journey continues.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>A Few Maturity Models</title>
    <link href="https://en.kovchinnikov.info/2024-04-maturity.html" />
    <updated>2024-04-25T22:33:00Z</updated>
    <id>https://en.kovchinnikov.info/2024-04-maturity.html</id>
    <content type="html">&lt;p&gt;The story of the Capability Maturity Model started, according to Wikipedia, in 1986 with the U.S. Department of Defense. Since then a CMM institute was established and several models were developed.&lt;/p&gt;
&lt;p&gt;I found it useful to develop a model for a particular area with a subject matter expert and apply it, answering the Three Main Questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Where are we?&lt;/li&gt;
&lt;li&gt;Where are we heading to?&lt;/li&gt;
&lt;li&gt;How do we get there?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&#39;s important to understand that the criteria in the model are not comprehensive, but rather indicative. It&#39;s also important, that the model defines absolute levels, so it should be updated as new practices emerge. The levels themselves can be depicted using the radar chart, which many top managers from my experience find intuitive and easy to understand. So, I decided to publish the following models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.kovchinnikov.info/pdf/s3m.pdf&quot;&gt;Sales Maturity Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.kovchinnikov.info/pdf/p3m.pdf&quot;&gt;Project Management Maturity Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.kovchinnikov.info/pdf/dmm.pdf&quot;&gt;Digitalization Maturity Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Special thanks to the people, who helped me a lot with my development effort:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Andrey Malakhov for Project Management Maturity Model&lt;/li&gt;
&lt;li&gt;Ekaterina Mityasova for Sales Maturity Model&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;p&gt;Please remember to put a link to this website as a source, if you use it.&lt;/p&gt;
</content>
  </entry>
</feed>